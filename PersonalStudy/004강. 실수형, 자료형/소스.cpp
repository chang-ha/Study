int main()
{
	// ------------4강----------------

	// 실수형 자료형은 어떻게 표현하는가???
	// 0 ~ 1 사이의 실수만 하더라도 무수히 많음 = 특정 비트값으로 고정 불가능
	// 따라서 부동소수점이라는 방법으로 표현
	// 부동소수점이 중요하기 보단 정수형과 실수형의 처리 방식이 다르다는걸 인지해야함
	// 정수형과 실수형이 같이 처리될 때, 둘 중의 하나의 처리방식을 채택해야함
	// ex) 정수형 4와 실수형 4.0은 처리 방식이 완전 다름


	// a가 자료형이 int이기 때문에 4.0을 정수처리방식으로 변경하여 계산한 값을 a에 넣음
	// 4.0(실수표현체계)를 4(정수표현체계)로 바꾸는 형변환연산이 들어감
	// 둘을 혼합해서 쓰는 경우 주의해야함 (본인의 의도가 아니면 피해야함)
	int a = 4 + 4.0;

	// 실수는 완전 정확한 값을 표현하진 못한다.
	// 실수표현체계는
	// 맨 앞은 부호비트
	// 그 뒤에 지수파트
	// 그 뒤에 가수파트로 이루어져 있음
	// 계산 방법은
	// ex) 0.625이면 0.1(2)은 2^-1, 0.01(2)은 2^-2, 0.001(2)은 2^-3
	// 따라서 0.625는 2진수로 표현하면 0.101(2) << 2^-1 + 2^-3
	// 계산 방법이 이렇다 보니 아주 정확한 값을 표현하진 못하고
	// 근사한 값으로 나타나게 됨
	// 그래서 실수를 사용할 때는 조심해야됨
	// result == 1.0을 원하지만 1.0일 경우도 있고 0.9999... 일 수도 있음
	// 이를 실수의 정밀도라고 표현함

	// 정수표현 방식과 실수 표현 방식은 다름을 알아야함
	// 실수 표현방식은 정밀도에 의존한다.
	// 따라서 double 자료형이 더 아래의 소수점까지 정확하게 표현이 가능하다.

	// 정수는 정수끼리, 실수는 실수끼리 연산하는걸 권장
	// 정수와 실수를 연산하는 경우, 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하자

	// float f = 10.2415f + 20;
	// 아래처럼 정수를 실수로 변환하여 연산하자 (명시적으로 변환하자 = 의도하였음을 명시)
	float f = 10.2415f + (float)20;


	return 0;
}