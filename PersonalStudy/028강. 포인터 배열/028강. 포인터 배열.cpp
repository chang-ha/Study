#include <stdlib.h>
#include <stdio.h>

int main()
{
	{
		// 포인터 변수
		// 자료형 변수명
		// 포인터 변수는 자료형 앞에 *이 붙음

		// int*는 주소를 저장하긴 하는데 주소값을 int로 보겠다는 뜻
		int* pInt = nullptr; // 주소를 저장하는 변수명
		char* pchar = nullptr;
		short* pShort = nullptr;

		// 포인터 변수 자체의 크기는 어떤가?? 플렛폼(32bit, 64bit)에 따라 다름 "64bit기준 8바이트"
		int iSize = sizeof(int*); // 8바이트

		// 포인터 주소값은 정수형 표현방식을 따르고 있음
		int i = 0;
		pInt = &i;
		// i변수의 주소값이 100번지면 i변수의 끝주소값은 104번지
		// pInt는 100(번지)를 가리키고 있음
		pInt += 1;
		// pInt에 +1을 하면 104번지를 가리키고 있음 << 100 + sizeof(int)*1 == 104
	}

	{
		// 포인터와 배열
		// 배열의 특징 
		// 1. 메모리가 연속적인 구조이다.
		// 2. 배열의 이름은 배열의 시작 주소이다.
		int iArr[10] = {};
		int(&iArr2)[10] = iArr; // 정확한 문법
		iArr; // << 배열의 시작 주소
		// 첫번째 칸에 10을 넣고 싶다.
		*(iArr + 0) = 10; // == iArr[0] = 10; << 배열의 첫번째 값의 인덱스를 0으로 하는 이유
		// 2번째 칸에 10을 넣고 싶다.
		// int단위로 접근
		*(iArr + 1) = 10; // == iArr[1] = 10;
	} 









}