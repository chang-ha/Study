// # << 전처리기 (컴파일 과정에서 가장 먼저 수행됨)
#define HUNGRY 1 // 매크로라고 부름, 내가 HUNGRY를 쓰는건 1로 받아들이겠다.

// define의 장점 
// 1. 가독성 (코드를 작성할 떄 내가 값들을 하나하나 다 기억할 수 없음, 배고픔 수치는 몇 이었지???)
// 2. 유지보수 (define 구문만 수정하면 코드의 모든 값들이 바뀜)

int main()
{
	{
		// 비트연산자
		// 비트단위로 연산이 진행될 떄 사용
		// shift연산자 <<, >> (비트를 왼쪽 or 오른쪽 방향으로 밀어버림)
		// 2진수에서 1칸 올라가는 개념은 x2(2배) 상승하는 개념
		// 왼쪽으로 shift = 2^n배 개념
		unsigned char byte = 1; // byte = 1
		byte << 1; // byte = 2 

		// 오른쪽으로 shift = /2^n 개념 (몫만 나옴, 나머지는 소실)
		unsigned char byte2 = 13;
		byte >> 1; // 나머지는??? 생각할 이유 X

		// Shift 연산자 개인적인 Test
		// 부호비트자리는 unsigned / signed에 따라 다름 (받는 자료형도 unsigned / signed 구분필수)
		unsigned int test = 0b01000000000000000000000000000000; // 부호비트 사용 안할시
		unsigned int value = test << 1;
		signed int test2 = 0b01000000000000000000000000000000; // 부호비트 사용 시
		signed int value2 = test2 << 1;
		int a = 0;
	}

	{
		// 비트 곱(&), 합(|), XOR(^), 비트반전(~)
		// 비트끼리 연산자는 각 자리에 맞게 연산됨
		// & : 각 비트가 둘 다 1이면 1, 하나라도 0이면 0
		// | : 비트 둘 중 하나만 1이여도 1, 둘 다 0이면 0 
		// ~ : 각 비트들을 반전시킴 (1은 0으로, 0은 1으로)
		// ^ : 각 자리의 비트가 같으면 0, 다르면 1
	}
	{
		int Value = HUNGRY;
	}
}